#!/bin/bash

set -e

ZK_MAX_CLIENT_CNXNS=${ZK_MAX_CLIENT_CNXNS:-60}
ID_FILE="$ZOO_DATA_DIR/myid" 
ZOO_CONFIG_FILE="$ZOO_CONF_DIR/zoo.cfg" 
LOGGER_PROPS_FILE="$ZOO_CONF_DIR/log4j.properties" 
JAVA_ENV_FILE="$ZOO_CONF_DIR/java.env"
HOST=`hostname -s` 
DOMAIN=`hostname -d`

# Allow the container to be started with `--user`
if [[ "$1" = 'zkServer.sh' && "$(id -u)" = '0' ]]; then
    chown -R zookeeper "$ZOO_DATA_DIR" "$ZOO_DATA_LOG_DIR" "$ZOO_LOG_DIR" "$ZOO_CONF_DIR"
    exec gosu zookeeper "$0" "$@"
fi

function print_servers() {
    for (( i=1; i<=$ZOO_REPLICAS; i++ ))
    do
        echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZOO_SERVER_PORT:$ZOO_ELECTION_PORT;$ZOO_CLIENT_PORT"
    done
}


function add_env() {
    echo "Validating environment"

    if [ -z $ZOO_REPLICAS ]; then
        ZOO_REPLICAS=1
        echo "ZOO_REPLICAS is a mandatory environment variable if set cluster mode"
    fi

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Failed to extract ordinal from hostname $HOST, set NAME=hostname, ORD=1"
        NAME=$HOST
        ORD=0
    fi

    MY_ID=$((ORD+1))
    print_servers
}

function create_config() {
    rm -f $ZOO_CONFIG_FILE
    echo "Creating ZooKeeper configuration"
    echo "#This file was autogenerated Automatically DO NOT EDIT" >> $ZOO_CONFIG_FILE
    echo "dataDir=$ZOO_DATA_DIR" >> $ZOO_CONFIG_FILE
    echo "dataLogDir=$ZOO_DATA_LOG_DIR" >> $ZOO_CONFIG_FILE
    echo "tickTime=$ZOO_TICK_TIME" >> $ZOO_CONFIG_FILE
    echo "initLimit=$ZOO_INIT_LIMIT" >> $ZOO_CONFIG_FILE
    echo "syncLimit=$ZOO_SYNC_LIMIT" >> $ZOO_CONFIG_FILE
    echo "maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS" >> $ZOO_CONFIG_FILE
    #echo "minSessionTimeout=$ZOO_MIN_SESSION_TIMEOUT" >> $ZOO_CONFIG_FILE
    #echo "maxSessionTimeout=$ZOO_MAX_SESSION_TIMEOUT" >> $ZOO_CONFIG_FILE
    echo "autopurge.snapRetainCount=$ZOO_SNAP_RETAIN_COUNT" >> $ZOO_CONFIG_FILE
    echo "autopurge.purgeInterval=$ZOO_PURGE_INTERVAL" >> $ZOO_CONFIG_FILE
    echo "standaloneEnabled=$ZOO_STANDALONE_ENABLED" >> $ZOO_CONFIG_FILE
    echo "admin.enableServer=$ZOO_ADMINSERVER_ENABLED" >> $ZOO_CONFIG_FILE

    if [[ -z $ZOO_SERVERS ]]; then
        if [ $ZOO_REPLICAS -gt 1 ]; then
            print_servers >> $ZOO_CONFIG_FILE
        else
            echo "server.1=localhost:2888:3888;2181" >> $ZOO_CONFIG_FILE
        fi
    else
        for server in $ZOO_SERVERS; do
            echo "$server" >> $ZOO_CONFIG_FILE
        done
    fi

    if [[ -n $ZOO_4LW_COMMANDS_WHITELIST ]]; then
        echo "4lw.commands.whitelist=$ZOO_4LW_COMMANDS_WHITELIST" >> $ZOO_CONFIG_FILE
    else
        echo "4lw.commands.whitelist=*" >> $ZOO_CONFIG_FILE
    fi

    echo "Wrote ZooKeeper configuration file to $ZOO_CONFIG_FILE"
}

function create_data_dirs() {
    echo "Creating ZooKeeper data directories and setting permissions"

    if [ ! -d $ZOO_DATA_DIR  ]; then
        mkdir -p $ZOO_DATA_DIR
        chown -R $ZOO_USER:$ZOO_USER $ZOO_DATA_DIR
    fi

    if [ ! -d $ZOO_DATA_LOG_DIR  ]; then
        mkdir -p $ZOO_DATA_LOG_DIR
        chown -R $ZOO_USER:$ZOO_USER $ZOO_DATA_LOG_DIR
    fi

    if [ ! -d $ZOO_LOG_DIR  ]; then
        mkdir -p $ZOO_LOG_DIR
        chown -R $ZOO_USER:$ZOO_USER $ZOO_LOG_DIR
    fi

    if [ ! -f $ID_FILE ]; then
        echo $MY_ID >> $ID_FILE
    fi

    echo "Created ZooKeeper data directories and set permissions in $ZOO_DATA_DIR"
}

function create_log_props () {
    rm -f $LOGGER_PROPS_FILE
    echo "Creating ZooKeeper log4j configuration"
    echo "zookeeper.root.logger=CONSOLE" >> $LOGGER_PROPS_FILE
    echo "zookeeper.console.threshold="$ZOO_LOG_LEVEL >> $LOGGER_PROPS_FILE
    echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOGGER_PROPS_FILE
    echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOGGER_PROPS_FILE
    echo "Wrote log4j configuration to $LOGGER_PROPS_FILE"
}

function create_java_env() {
    rm -f $JAVA_ENV_FILE
    echo "Creating JVM configuration file"
    echo "ZOO_LOG_DIR=$ZOO_LOG_DIR" >> $JAVA_ENV_FILE
    echo "JVMFLAGS=\"-Xmx$ZOO_HEAP_SIZE -Xms$ZOO_HEAP_SIZE\"" >> $JAVA_ENV_FILE
    echo "Wrote JVM configuration to $JAVA_ENV_FILE"
}

add_env && create_config && create_log_props && create_data_dirs && create_java_env

exec "$@"
